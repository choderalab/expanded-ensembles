name: CI

on:
  pull_request:
    branches:
      - "main"
  schedule:
    # nightly tests
    - cron: "0 0 * * *"
  push:
    branches:
      - main

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    name: Test on ubuntu-latest, Python ${{ matrix.python-version }}, OpenMM ${{ matrix.openmm }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10",]
        openmm: ["dev", "8.0", "7.7"]

    env:
      OPENMM: ${{ matrix.openmm }}
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt

    steps:
      - uses: actions/checkout@v2

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Setup micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: devtools/conda-envs/test_env.yaml
          environment-name: test
          extra-specs: |
            python=${{ matrix.python-version }}


      - name: Refine test environment
        shell: bash -l {0}
        run: |
          case ${{ matrix.openmm }} in
            dev)
              echo "Using dev build of OpenMM"
              micromamba install -c conda-forge/label/openmm_dev -c conda-forge openmm;;
            *)
              echo "installing OpenMM version ${{ matrix.openmm }}"
              micromamba install -y -c conda-forge openmm=${{ matrix.openmm }};;
          esac

      - name: Install package
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps -v .

      - name: Environment Information
        shell: bash -l {0}
        run: |
          micromamba info
          micromamba list

      - name: Decrypt OpenEye license
        shell: bash -l {0}
        env:
          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}
        run: |
          echo "${OE_LICENSE_TEXT}" > ${OE_LICENSE}
          python -c "import openeye; assert openeye.oechem.OEChemIsLicensed(), 'OpenEye license checks failed!'"

      - name: Test the package
        shell: bash -l {0}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_TEST_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_TEST_SECRET }}
        run: |
          export TRAVIS=true
          pytest -v --cov-report xml --cov=perses --durations=0 -a "not advanced" -n auto -m "not gpu_needed" perses/tests

      - name: Codecov
        if: ${{ github.repository == 'choderalab/perses'
                && github.event != 'schedule' }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
