name: CI

on:
  pull_request:
    branches:
      - "master"
  schedule:
    # nightly tests
    - cron: "0 0 * * *"
  push:
    branches:
      - master

jobs:
  test:
    name: Test on ubuntu-latest, Python ${{ matrix.python-version }}, OpenMM ${{ matrix.openmm }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        openmm: ["nightly", "7.5.1.", "7.6.0"]

    env:
      OPENMM: ${{ matrix.openmm }}
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt

    steps:
      - uses: actions/checkout@v2

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      # More info on options: https://github.com/conda-incubator/setup-miniconda
      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          environment-file: devtools/conda-envs/test_env.yaml
          channels: jaimergp/label/unsupported-cudatoolkit-shim,conda-forge,defaults,omnia-dev,openeye
          activate-environment: test
          auto-update-conda: true
          auto-activate-base: false
          show-channel-urls: true
          channel-priority: true

      - name: Refine test environment
        shell: bash -l {0}
        run: |
          case ${{ matrix.openmm }} in
            nightly)
              echo "Using nightly dev build of OpenMM."
              conda install -y -c omnia-dev openmm --override-channels --force-reinstall
              echo "Using beta build of openeye toolkit"
              conda install -y -c openeye/label/beta openeye-toolkits --override-channels --force-reinstall;;
            *)
              echo "installing OpenMM version ${{ matrix.openmm }}"
              mamba install -y -c conda-forge openmm=${{ matrix.openmm }};;
          esac

      - name: Install package
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps -v .

      - name: Environment Information
        shell: bash -l {0}
        run: |
          mamba info -a
          mamba list

      - name: Decrypt OpenEye license
        shell: bash -l {0}
        env:
          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}
        run: |
          echo "${OE_LICENSE_TEXT}" > ${OE_LICENSE}
          python -c "import openeye; assert openeye.oechem.OEChemIsLicensed(), 'OpenEye license checks failed!'"

      - name: Test the package
        shell: bash -l {0}
        run: |
          export TRAVIS=true
          pushd .
          pytest -v --cov-report xml --cov=perses --durations=0 -a "not advanced" -n auto -m "not gpu_needed"
          popd

      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
